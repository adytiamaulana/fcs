package co.id.diti.fcs.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CardTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardTypeAllPropertiesEquals(CardType expected, CardType actual) {
        assertCardTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertCardTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardTypeAllUpdatablePropertiesEquals(CardType expected, CardType actual) {
        assertCardTypeUpdatableFieldsEquals(expected, actual);
        assertCardTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardTypeAutoGeneratedPropertiesEquals(CardType expected, CardType actual) {
        assertThat(expected)
            .as("Verify CardType auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardTypeUpdatableFieldsEquals(CardType expected, CardType actual) {
        assertThat(expected)
            .as("Verify CardType relevant properties")
            .satisfies(e -> assertThat(e.getCardCode()).as("check cardCode").isEqualTo(actual.getCardCode()))
            .satisfies(e -> assertThat(e.getCardName()).as("check cardName").isEqualTo(actual.getCardName()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getDeletedBy()).as("check deletedBy").isEqualTo(actual.getDeletedBy()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardTypeUpdatableRelationshipsEquals(CardType expected, CardType actual) {}
}
