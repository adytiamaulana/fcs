package co.id.diti.fcs.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PersonalInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonalInfoAllPropertiesEquals(PersonalInfo expected, PersonalInfo actual) {
        assertPersonalInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertPersonalInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonalInfoAllUpdatablePropertiesEquals(PersonalInfo expected, PersonalInfo actual) {
        assertPersonalInfoUpdatableFieldsEquals(expected, actual);
        assertPersonalInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonalInfoAutoGeneratedPropertiesEquals(PersonalInfo expected, PersonalInfo actual) {
        assertThat(expected)
            .as("Verify PersonalInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonalInfoUpdatableFieldsEquals(PersonalInfo expected, PersonalInfo actual) {
        assertThat(expected)
            .as("Verify PersonalInfo relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getTelephone()).as("check telephone").isEqualTo(actual.getTelephone()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getDeletedBy()).as("check deletedBy").isEqualTo(actual.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonalInfoUpdatableRelationshipsEquals(PersonalInfo expected, PersonalInfo actual) {
        assertThat(expected)
            .as("Verify PersonalInfo relationships")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getCardType()).as("check cardType").isEqualTo(actual.getCardType()));
    }
}
