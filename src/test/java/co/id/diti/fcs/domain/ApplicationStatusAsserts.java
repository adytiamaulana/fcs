package co.id.diti.fcs.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationStatusAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationStatusAllPropertiesEquals(ApplicationStatus expected, ApplicationStatus actual) {
        assertApplicationStatusAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationStatusAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationStatusAllUpdatablePropertiesEquals(ApplicationStatus expected, ApplicationStatus actual) {
        assertApplicationStatusUpdatableFieldsEquals(expected, actual);
        assertApplicationStatusUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationStatusAutoGeneratedPropertiesEquals(ApplicationStatus expected, ApplicationStatus actual) {
        assertThat(expected)
            .as("Verify ApplicationStatus auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationStatusUpdatableFieldsEquals(ApplicationStatus expected, ApplicationStatus actual) {
        assertThat(expected)
            .as("Verify ApplicationStatus relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getDeletedBy()).as("check deletedBy").isEqualTo(actual.getDeletedBy()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationStatusUpdatableRelationshipsEquals(ApplicationStatus expected, ApplicationStatus actual) {}
}
